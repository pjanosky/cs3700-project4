#!/usr/bin/env -S python3 -u

import argparse, socket, time, json, select, sys, zlib
from packet import Packet


class Receiver:
    def __init__(self):
        self.socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
        self.socket.bind(('0.0.0.0', 0))
        self.port = self.socket.getsockname()[1]
        self.log("Bound to port %d" % self.port)

        self.remote_host = None
        self.remote_port = None

        self.packets = []
        self.output_idx = -1

    def send(self, message):
        self.socket.sendto(json.dumps(message).encode('utf-8'), (self.remote_host, self.remote_port))

    def log(self, message):
        sys.stderr.write(message + "\n")
        sys.stderr.flush()

    def run(self):
        while True:
            socks = select.select([self.socket], [], [])[0]
            for conn in socks:
                data, addr = conn.recvfrom(65535)

                # Grab the remote host/port if we don't already have it
                if self.remote_host is None:
                    self.remote_host = addr[0]
                    self.remote_port = addr[1]

                msg = self.valid_msg(data)
                if msg is None:
                    log('Received corrupted message')
                else:
                    pkt = Packet(msg['data'], None, None)
                    self.log(f"Received data message, idx: {msg['index']}")
                    self.send_ack(msg['index'])

                    if msg['index'] >= len(self.packets) or self.packets[msg['index']] is None:
                        # this is a new packet
                        self.insert_pkt(pkt, msg['index'])
                        self.output_data()

    def valid_msg(self, data):
        try:
            msg = json.loads(data.decode('utf-8'))
        except json.decoder.JSONDecodeError:
            return None

        if ('hash' in msg and
                'msg' in msg and
                'index' in msg['msg'] and
                'data' in msg['msg'] and
                zlib.crc32(json.dumps(msg['msg'], sort_keys=True).encode('utf-8')) == msg['hash']):
            return msg['msg']
        else:
            return None

    def send_ack(self, index):
        msg = {'index': index}
        hash_value = zlib.crc32(json.dumps(msg, sort_keys=True).encode('utf-8'))
        msg = {'hash': hash_value, 'msg': msg}
        log(f'Sending ACK: index={index}')
        self.send(msg)

    def insert_pkt(self, pkt, i):
        if i >= len(self.packets):
            self.packets += [None for _ in range(i - len(self.packets))]
            self.packets.append(pkt)
        else:
            self.packets[i] = pkt

    def output_data(self):
        for i in range(self.output_idx + 1, len(self.packets)):
            pkt = self.packets[i]
            if pkt is None:
                break
            else:
                self.output_idx = i
                print(pkt.data, end='', flush=True)

    def log_acks(self):
        result = '['
        for i in range(0, len(self.packets)):
            result += f'{i if self.packets[i] is not None else "none"}, '
        log(result + ']')


# returns the current time since the epcoh in ms
def now():
    return int(time.time() * 1000)


def log(message):
    sys.stderr.write(str(message) + '\n')
    sys.stderr.flush()


if __name__ == '__main__':
    parser = argparse.ArgumentParser(description='receive data')
    args = parser.parse_args()
    sender = Receiver()
    sender.run()
