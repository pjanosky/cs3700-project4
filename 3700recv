#!/usr/bin/env -S python3 -u

import argparse, socket, json, select, sys, zlib
from packet import Packet, now


class Receiver:
    def __init__(self):
        self.socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
        self.socket.bind(('0.0.0.0', 0))
        self.port = self.socket.getsockname()[1]
        self.log("Bound to port %d" % self.port)

        self.remote_host = None
        self.remote_port = None

        self.received = []  # a bitmap of which packets have been received
        self.cached_packets = []  # the packets that have yet to be outputted
        self.output_index = -1  # the index of the last packet that has been outputted

    def send(self, message):
        self.socket.sendto(json.dumps(message).encode('utf-8'), (self.remote_host, self.remote_port))

    def log(self, message):
        sys.stderr.write(message + "\n")
        sys.stderr.flush()

    def run(self):
        while True:
            socks = select.select([self.socket], [], [])[0]
            for conn in socks:
                data, addr = conn.recvfrom(65535)

                # Grab the remote host/port if we don't already have it
                if self.remote_host is None:
                    self.remote_host = addr[0]
                    self.remote_port = addr[1]

                msg = self.valid_msg(data)
                if msg is None:
                    log('Received corrupted message')
                else:
                    pkt = Packet(msg['index'], msg['data'], None, None)
                    self.log(f"Received data message, idx: {msg['index']}")
                    self.send_ack(msg['index'])

                    if not self.was_received(msg['index']):
                        # this is a new packet
                        self.mark_received(msg['index'])
                        self.cached_packets.append(pkt)
                        self.output_data()

    def valid_msg(self, data):
        try:
            msg = json.loads(data.decode('utf-8'))
        except json.decoder.JSONDecodeError:
            return None

        if ('hash' in msg and
                'msg' in msg and
                'index' in msg['msg'] and
                'data' in msg['msg'] and
                zlib.crc32(json.dumps(msg['msg'], sort_keys=True).encode('utf-8')) == msg['hash']):
            return msg['msg']
        else:
            return None

    def send_ack(self, index):
        msg = {'index': index}
        hash_value = zlib.crc32(json.dumps(msg, sort_keys=True).encode('utf-8'))
        msg = {'hash': hash_value, 'msg': msg}
        log(f'Sending ACK: index={index}')
        self.send(msg)

    def mark_received(self, index):
        if index >= len(self.received):
            self.received += [False for _ in range(index - len(self.received))]
            self.received.append(True)
        else:
            self.received[index] = True

    def was_received(self, index):
        return index < len(self.received) and self.received[index]

    def pop_cached(self, index):
        for pkt in self.cached_packets:
            if pkt.index == index:
                self.cached_packets.remove(pkt)
                return pkt
        return None

    def output_data(self):
        for i in range(self.output_index + 1, len(self.received)):
            if self.was_received(i):
                self.output_index = i
                print(self.pop_cached(i).data, end='', flush=True)
            else:
                return

    def log_acks(self):
        result = '['
        for i in range(0, len(self.received)):
            result += f'{i if self.was_received(i) else "_"}, '
        log(result + ']')


def log(message):
    sys.stderr.write(str(message) + '\n')
    sys.stderr.flush()


if __name__ == '__main__':
    parser = argparse.ArgumentParser(description='receive data')
    args = parser.parse_args()
    sender = Receiver()
    sender.run()
